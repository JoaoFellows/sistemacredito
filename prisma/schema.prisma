generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cliente {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  idade               Int
  renda               Float
  role                Role                 @default(CLIENTE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  solicitacoesCredito SolicitacaoCredito[]

  @@index([name])
}

model ModalidadeCredito {
  id                  Int                  @id @default(autoincrement())
  name                String
  idadeMin            Int
  idadeMax            Int
  rendaMin            Float
  rendaMax            Float
  taxaJuros           Float
  tipoJuros           String
  taxaAdm             Float
  prazoAnos           Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  solicitacoesCredito SolicitacaoCredito[]

  @@index([name])
}

model LinhaFinanciamento {
  id                  Int                  @id @default(autoincrement())
  name                String
  permiteConsorcio    Boolean
  solicitacoesCredito SolicitacaoCredito[]

  @@index([name])
}

model SolicitacaoCredito {
  id                   Int                @id @default(autoincrement())
  clienteId            Int
  modalidadeCreditoId  Int
  linhaFinanciamentoId Int
  status               Status
  dataSolicitacao      DateTime           @default(now())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  cliente              Cliente            @relation(fields: [clienteId], references: [id])
  linhaFinanciamento   LinhaFinanciamento @relation(fields: [linhaFinanciamentoId], references: [id])
  modalidadeCredito    ModalidadeCredito  @relation(fields: [modalidadeCreditoId], references: [id])
}

enum Status {
  PENDENTE
  APROVADA
  REPROVADA
}

enum Role {
  CLIENTE
  ADMIN
}
